#!/usr/bin/python
# Filename: detect_format.py

import csv
import re
import os
import sys
from optparse import OptionParser

# A bit of path manipulation to import autozip.py from ../utils/
GETEV_MAIN_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if not GETEV_MAIN_PATH in sys.path:
    sys.path.insert(1, GETEV_MAIN_PATH)
del GETEV_MAIN_PATH
from utils import autozip

MAX_LINES_CHECKED = 100

def detect_format(file_input):
    """Detect the genetic data format of a file.

    Takes a path to a file, or a string generator (e.g. a filehandle).
    Tries to match one of the following:
      23andme: 23andme (microarray genotyping)
      CGIvar: Complete Genomics var file
      GFF: General Feature Format
      VCF: Variant Call Format (only tested for 23andme exome data)
    """
    looks_like = dict()
    if isinstance(file_input, str):
        try:
            f_in = autozip.file_open(file_input, 'r')
        except AssertionError:
            f_in = autozip.file_open(file_input, 'r', 'deCODEme_scan.csv')
            print "deCODEme archive (deCODEme) detected"
            looks_like['deCODEme'] = True
    else:
        f_in = file_input

    line_count = 0
    for line in f_in:
        line_count += 1
        if any([looks_like[x] for x in looks_like.keys()]):
            break    
        if line_count > MAX_LINES_CHECKED:
            break

        # Check comment lines, if they exist, for information on file type.
        if re.match('#', line):
            if re.match(r'#TYPE.*VAR-ANNOTATION', line):
                print "Complete Genomics var file format (CGIvar) detected"
                looks_like['CGIvar'] = True
            if re.match(r'##gff-version', line):
                print "General Feature Format (GFF) detected"
                looks_like['GFF'] = True
            if re.match(r'# This data file generated by 23andMe', line):
                print "23andme microarray genotyping data (23andme) detected"
                looks_like['23andme'] = True
            if re.match(r'##fileformat=VCFv4', line):
                print "Variant Call Format (VCF) detected"
                looks_like['VCF'] = True

        # Look at other lines and decide based on their format.
        tsv_data = line.split('\t')
        csv_data = list(csv.reader([line]))

        if ( len(csv_data) > 5 and
             re.match(r'rs', csv_data[0]) and
             re.match(r'[ACGT]', csv_data[1]) and
             re.match(r'[0-9]', csv_data[3]) and
             re.match(r'[+-]', csv_data[4]) and
             re.match(r'[ACGT]', csv_data[5]) ):
            print "deCODEme microarray genotyping data (deCODEme) guessed"
            looks_like['deCODEme'] = True
        if ( len(tsv_data) > 3 and
             re.match(r'rs', tsv_data[0]) and 
             re.match(r'[0-9]', tsv_data[2]) and
             re.match(r'[ACGT][ACGT]', tsv_data[3]) ):
            print "23andme microarray genotyping data (23andme) guessed"
            looks_like['23andme'] = True
        if ( len(tsv_data) > 6 and
             re.match(r'chr', tsv_data[3]) and 
             re.match(r'[0-9]', tsv_data[4]) and 
             re.match(r'[0-9]', tsv_data[5]) and
             (tsv_data[6] == "no-call" or tsv_data[6] == "ref") ):
            print "Complete Genomics var file format (CGIvar) guessed"
            looks_like['CGIvar'] = True
        if ( len(tsv_data) > 6 and
             re.match(r'[0-9]', tsv_data[3]) and
             re.match(r'[0-9]', tsv_data[4]) and
             tsv_data[6] == "+" ):
            print "General Feature Format (GFF) guessed"
            looks_like['GFF'] = True
        if ( len(tsv_data) > 7 and
             re.match(r'[0-9]', tsv_data[1]) and
             re.match(r'[ACGT]', tsv_data[3]) and
             re.match(r'[ACGT]', tsv_data[4]) and
             len(tsv_data[7].split(';')) > 2 ):
            print "Variant Call Format (VCF) guessed"
            looks_like['VCF'] = True
    
    if isinstance(file_input, str):
        f_in.close()

    if any([looks_like[x] for x in looks_like.keys()]):
        return [x for x in looks_like.keys() if looks_like[x]][0]
    else:
        return 'UNKNOWN'

def main():
    # Parse options
    usage = ("\n%prog -i inputfile\n"
             "%prog < inputfile")
    parser = OptionParser(usage=usage)
    parser.add_option("-i", "--input", dest="inputfile",
                      help="Read genetic data from INFILE", metavar="INFILE")

    options, args = parser.parse_args()

    # Handle input
    if sys.stdin.isatty():  # false if data is piped in
        var_input = options.inputfile
    else:
        var_input = sys.stdin

    # Handle output
    format_type = detect_format(var_input)
    print format_type

if __name__ == "__main__":
    main()
